# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Deploy API

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: prod-deploy
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        run: git archive --format=tar.gz -o release.tgz HEAD

      # Decodifica la privada (Base64) y la guarda en el WORKSPACE (montado en los containers)
      - name: Write SSH key to file (base64 → workspace)
        shell: bash
        env:
          SSH_KEY_B64: ${{ secrets.SSH_KEY_B64 }}
        run: |
          set -e
          umask 077
          mkdir -p "$GITHUB_WORKSPACE/.ssh"
          echo "$SSH_KEY_B64" | base64 -d > "$GITHUB_WORKSPACE/.ssh/id_ed25519_actions"
          chmod 600 "$GITHUB_WORKSPACE/.ssh/id_ed25519_actions"
          # exportamos la ruta para usarla en todos los pasos
          echo "KEY_PATH=$GITHUB_WORKSPACE/.ssh/id_ed25519_actions" >> "$GITHUB_ENV"
          # sanity checks
          ls -l "$GITHUB_WORKSPACE/.ssh/id_ed25519_actions"
          head -c 14 "$GITHUB_WORKSPACE/.ssh/id_ed25519_actions" | hexdump -C

      - name: Show private key fingerprint (debug)
        run: ssh-keygen -lf "$KEY_PATH"

      - name: Normalize host/user/port (trim)
        shell: bash
        run: |
          H="$(printf '%s' "${{ secrets.SSH_HOST }}" | tr -d '\r\n\t ' )"
          U="$(printf '%s' "${{ secrets.SSH_USER }}" | tr -d '\r\n\t ' )"
          P="$(printf '%s' "${{ secrets.SSH_PORT }}" | tr -d '\r\n\t ' )"
          echo "SSH_HOST_NORM=$H" >> "$GITHUB_ENV"
          echo "SSH_USER_NORM=$U" >> "$GITHUB_ENV"
          echo "SSH_PORT_NORM=$P" >> "$GITHUB_ENV"

      - name: SSH ping (-vvv)
        run: |
          ssh -vvv \
            -i "$KEY_PATH" \
            -p "$SSH_PORT_NORM" \
            -o StrictHostKeyChecking=no \
            -o IdentitiesOnly=yes \
            "$SSH_USER_NORM@$SSH_HOST_NORM" \
            'echo "SSH OK on $(hostname)"'

      - name: Upload to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST_NORM }}
          username: ${{ env.SSH_USER_NORM }}
          port: ${{ env.SSH_PORT_NORM }}
          key_path: ${{ env.KEY_PATH }}     # ← ahora dentro del workspace
          source: "release.tgz"
          target: "/tmp"
          debug: true

      - name: Deploy on server
        uses: appleboy/ssh-action@v1.0.3
        env:
          APP_DIR: /opt/tomboy-api
        with:
          host: ${{ env.SSH_HOST_NORM }}
          username: ${{ env.SSH_USER_NORM }}
          port: ${{ env.SSH_PORT_NORM }}
          key_path: ${{ env.KEY_PATH }}     # ← igual aquí
          script: |
            set -e
            REL=/tmp/release.tgz
            APP_DIR=${APP_DIR:-/opt/tomboy-api}

            sudo install -d -o www-data -g www-data "$APP_DIR"
            sudo find "$APP_DIR" -mindepth 1 -maxdepth 1 ! -name '.venv' ! -name '.env' -exec rm -rf {} +

            sudo tar --no-same-owner -xzf "$REL" -C "$APP_DIR"
            sudo chown -R www-data:www-data "$APP_DIR"

            if [ ! -d "$APP_DIR/.venv" ]; then
              sudo -u www-data python3 -m venv "$APP_DIR/.venv"
            fi
            sudo -u www-data bash -lc "
              . $APP_DIR/.venv/bin/activate &&
              python -m pip install -U pip wheel setuptools &&
              [ -f $APP_DIR/requirements.txt ] && pip install -r $APP_DIR/requirements.txt || true &&
              python -m pip install 'uvicorn[standard]' fastapi
            "

            sudo systemctl restart tomboy-api
            sudo systemctl is-active tomboy-api

      - name: Smoke test
        run: curl -fsS https://api.breathandbravery.com/docs >/dev/null
