# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Deploy API

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: prod-deploy
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        run: git archive --format=tar.gz -o release.tgz HEAD

      # Decodifica la clave SSH y la guarda como variable de entorno
      - name: Decode SSH key
        shell: bash
        env:
          SSH_KEY_B64: ${{ secrets.SSH_KEY_B64 }}
        run: |
          set -e
          # Decodificamos y guardamos como variable de entorno
          SSH_KEY_DECODED=$(echo "$SSH_KEY_B64" | base64 -d)
          echo "SSH_KEY_DECODED<<EOF" >> $GITHUB_ENV
          echo "$SSH_KEY_DECODED" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Normalize host/user/port (trim)
        shell: bash
        run: |
          H="$(printf '%s' "${{ secrets.SSH_HOST }}" | tr -d '\r\n\t ' )"
          U="$(printf '%s' "${{ secrets.SSH_USER }}" | tr -d '\r\n\t ' )"
          P="$(printf '%s' "${{ secrets.SSH_PORT }}" | tr -d '\r\n\t ' )"
          echo "SSH_HOST_NORM=$H" >> "$GITHUB_ENV"
          echo "SSH_USER_NORM=$U" >> "$GITHUB_ENV"
          echo "SSH_PORT_NORM=$P" >> "$GITHUB_ENV"

      - name: Upload to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST_NORM }}
          username: ${{ env.SSH_USER_NORM }}
          port: ${{ env.SSH_PORT_NORM }}
          key: ${{ env.SSH_KEY_DECODED }}
          source: "release.tgz"
          target: "/tmp"
          debug: true

      - name: Deploy on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST_NORM }}
          username: ${{ env.SSH_USER_NORM }}
          port: ${{ env.SSH_PORT_NORM }}
          key: ${{ env.SSH_KEY_DECODED }}
          script: |
            set -e
            REL=/tmp/release.tgz
            APP_DIR=/opt/tomboy-api/Backent_Tomboy

            sudo install -d -o www-data -g www-data "$APP_DIR"
            
            # Extraer a directorio temporal primero
            TMP_DIR=$(mktemp -d)
            sudo tar --no-same-owner -xzf "$REL" -C "$TMP_DIR"
            
            # Limpiar destino (excepto .venv y .env)
            sudo find "$APP_DIR" -mindepth 1 -maxdepth 1 ! -name '.venv' ! -name '.env' -exec rm -rf {} +
            
            # Mover archivos nuevos
            sudo cp -r "$TMP_DIR"/* "$APP_DIR"/
            sudo rm -rf "$TMP_DIR"
            sudo chown -R www-data:www-data "$APP_DIR"
            
            # Asegurar permisos del .env
            if [ -f "$APP_DIR/.env" ]; then
              sudo chown www-data:www-data "$APP_DIR/.env"
              sudo chmod 600 "$APP_DIR/.env"
            fi

            # Crear venv si no existe
            if [ ! -d "$APP_DIR/.venv" ]; then
              sudo -u www-data python3 -m venv "$APP_DIR/.venv"
            fi
            
            # Instalar dependencias
            sudo -u www-data bash -c "
              cd $APP_DIR &&
              .venv/bin/pip install -q -r requirements.txt
            "

            # Reiniciar servicio
            sudo systemctl restart tomboy-api
            
            # Esperar a que arranque
            for i in {1..30}; do
              if sudo systemctl is-active tomboy-api >/dev/null 2>&1; then
                if curl -fsS http://127.0.0.1:8100/docs >/dev/null 2>&1; then
                  echo "API corriendo correctamente"
                  exit 0
                fi
              fi
              echo "Esperando a que arranque... ($i/30)"
              sleep 2
            done

            echo "La app NO arrancÃ³ a tiempo" >&2
            sudo systemctl status tomboy-api --no-pager -l || true
            sudo journalctl -u tomboy-api -n 50 --no-pager || true
            exit 1

      - name: Smoke test
        run: curl -fsS https://api.breathandbravery.com/docs >/dev/null